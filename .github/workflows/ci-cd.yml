name: Build and Publish Docker Image

on:
  push:
    branches: [main, development]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, development]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest --cov=app tests/

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get app version for main branch
        # Uses a specific, predictable version pattern for main branch
        # This reads APP_VERSION from a version.txt file in the repo
        id: app_version
        if: github.ref == 'refs/heads/main'
        run: |
          VERSION=$(cat version.txt)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using explicit version: ${VERSION} for main branch"

      - name: Generate dev version for development branch
        # Creates a timestamp-based version for development branch
        id: dev_version
        if: github.ref == 'refs/heads/development'
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M)
          SHORT_SHA=$(git rev-parse --short HEAD)
          DEV_VERSION="dev-${TIMESTAMP}-${SHORT_SHA}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          echo "Using auto-generated version: ${DEV_VERSION} for development branch"

      - name: Set Docker tags
        id: docker_tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Main branch gets version from file and "latest" tag
            VERSION="${{ steps.app_version.outputs.version }}"
            echo "tags=skjall/medication-tracker:latest,skjall/medication-tracker:${VERSION}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            # Development branch gets dev- prefix with timestamp and commit hash
            DEV_VERSION="${{ steps.dev_version.outputs.version }}"
            echo "tags=skjall/medication-tracker:${DEV_VERSION},skjall/medication-tracker:development" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tag pushes
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "tags=skjall/medication-tracker:${VERSION}" >> $GITHUB_OUTPUT
          else
            # Other branches just get the branch name
            BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's/[\/]/-/g')
            echo "tags=skjall/medication-tracker:${BRANCH}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          build-args: |
            VERSION=${{ steps.app_version.outputs.version || steps.dev_version.outputs.version || github.ref_name }}
          cache-from: type=registry,ref=skjall/medication-tracker:buildcache
          cache-to: type=registry,ref=skjall/medication-tracker:buildcache,mode=max
